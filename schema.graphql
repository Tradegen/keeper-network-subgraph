type KeeperRegistry @entity {
    # KeeperRegistry contract address.
    id: ID!

    # Number of keepers registered in the system.
    keeperCount: Int!

    # Total number of jobs created.
    jobCount: Int!

    # Total revenue collected across all keepers.
    # Measured in the protocol's governance token.
    totalRevenue: BigInt!

    # Total number of upkeeps performed across all keepers.
    totalUpkeepsPerformed: Int!

    # Total number of transactions.
    txCount: Int!
}

type Job @entity {
    # Job ID in KeeperRegistry.
    id: ID!

    # 0 = indicator.
    # 1 = comparator.
    # 2 = trading bot.
    jobType: BigInt!

    # Reference to the parent Keeper entity.
    keeper: Keeper!

    # Address of the external contract this job is responsible for.
    target: String!

    # Indicator/comparator instance ID.
    # This value is 0 if the target is a trading bot.
    instanceID: BigInt!

    # User who created this job.
    owner: JobOwner!

    # Number of times this job has been updated.
    numberOfUpdates: Int!

    # Amount of tokens available for this job.
    # The job owner supplies tokens to the job when creating the job.
    # This is used for paying the keeper fee.
    # Measured in the protocol's governance token.
    availableFunds: BigInt!

    # Timestamp at which the job was last updated
    lastUpdated: BigInt!

    # Total amount of fees that this job has paid.
    # Measured in the protocol's governance token.
    feesPaid: BigInt!
}

type Payee @entity {
    # Payee's wallet address.
    id: ID!

    # Total amount of fees that the payee has collected.
    # Measured in the protocol's governance token.
    collectedFees: BigInt!

    # Keeper entities with this payee.
    keepers: [Keeper!]! @derivedFrom(field: "payee")
}

type JobOwner @entity {
    # Job owner's wallet address.
    id: ID!

    # Total amount of fees that the job owner has paid across all jobs.
    # Measured in the protocol's governance token.
    feesPaid: BigInt!

    # All jobs that are owned by this user.
    jobs: [Job!]! @derivedFrom(field: "owner")
}

type Keeper @entity {
    # Keeper contract address.
    id: ID!

    # Address of the user who deployed this keeper.
    owner: String!

    # Measured in the protocol's governance token.
    fee: BigInt!

    # Receives keeper fees.
    payee: Payee!

    # Total fees collected by this keeper.
    # Measured in the protocol's governance token.
    collectedFees: BigInt!

    # Address of the user/contract that can perform upkeeps on behalf of this keeper.
    dedicatedCaller: String!

    # Total number of job updates this keeper has performed.
    numberOfUpdates: Int!

    # Timestamp at which the Keeper contract was created.
    createdOn: BigInt!

    # All jobs that this keeper is responsible for.
    jobs: [Job!]! @derivedFrom(field: "keeper")
}

type Update @entity {
    # Transaction hash.
    id: ID!

    # Reference to the Job that was updated.
    job: Job!

    # Reference to the Keeper that performed the upkeep.
    keeper: Keeper!

    # Timestamp at which the upkeep was performed.
    timestamp: BigInt!

    # Amount of tokens paid to update the job.
    # Measured in the protocol's governance token.
    feePaid: BigInt!
}

# Data accumulated and condensed into day stats for all of the keeper network.
type KeeperRegistryDayData @entity {
    # Timestamp rounded to current day by dividing by 86400.
    id: ID!
    date: Int!

    # Measured in the protocol's governance token.
    dailyRevenue: BigInt!
    totalRevenue: BigInt!

    dailyTxns: Int!

    dailyUpkeepsPerformed: Int!
    totalUpkeepsPerformed: Int!

    dailyKeepersRegistered: Int!
    totalKeepersRegistered: Int!

    dailyJobsCreated: Int!
    totalJobsCreated: Int!
}

type KeeperDayData @entity {
    # Timestamp rounded to current day by dividing by 86400.
    id: ID!
    date: Int!

    # Measured in the protocol's governance token.
    dailyRevenue: BigInt!

    dailyTxns: Int!
    dailyUpkeepsPerformed: Int!
}